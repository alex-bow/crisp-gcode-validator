package crisp;

import java.util.Map;
import static java.util.Map.entry;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;

// This validator is intended for the parameters that are visible from the autogenerated
// PrusaSlicer comments, taking the form param = value. While it has no utility
// on random, uncommented pieces of GCode, it speeds up the library workflow where
// we require PrusaSlicer profiles that we provide.

class ConfigValidator extends ValidationModule {
    static HashMap<String, List<String>> forbidden;

    static {
        forbidden = new HashMap<>(Map.ofEntries(
            entry("bridge_speed", List.of("30"))
        ));
    }

    void validate(LazyParser parser) {
        Class<? extends ConsumerModule> cl = new PrusaCommentConsumer(parser).getClass();
        PrusaCommentConsumer commentConsumer = (PrusaCommentConsumer) parser.getConsumer(cl);
        if (commentConsumer == null) {
            System.err.println("No Prusa comment consumer present on parser.");
            return;
        }

        for (Map.Entry<String, List<String>> entry : forbidden.entrySet()) {
            Token value = commentConsumer.data.get(entry.getKey());
            System.out.println(entry.getKey());
            System.out.println(value);
            if (value != null && (entry.getValue().contains(value.strValue) ||
                    entry.getValue().contains(value.value))) {
                System.err.println("Found error in GCODE on token " + entry.getKey() +
                    "; " + value.value + " or " + value.strValue + " is a forbidden value!");
            }
        }

    }
}
